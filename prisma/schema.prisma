// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           Int   @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int   
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id           Int     @id @default(autoincrement())
  name         String
  firstName    String  
  lastName     String  @unique
  email        String  @unique
  password     String
  phone        String
  profileImage String?
  status       Boolean @default(false)
  inviteSent   Boolean @default(false) 
  session      Session[]
  // Foreign key to Role
  roleId       Int
  role         Role @relation(fields: [roleId], references: [id])

  @@index([roleId], name: "idx_roleId")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Role {
id            Int     @id @default(autoincrement())
displayTitle   String // Human-friendly name for UI
roleTitle      String @unique // Programmatic name for code
description   String?
// Relationships
users User[]
// Module Permissions
canViewBrands   Boolean @default(false)
canAddBrands    Boolean @default(false)
canEditBrands   Boolean @default(false)
canDeleteBrands Boolean @default(false)

canViewCategories   Boolean @default(false)
canAddCategories    Boolean @default(false)
canEditCategories   Boolean @default(false)
canDeleteCategories Boolean @default(false)

canViewProducts   Boolean @default(false)
canAddProducts    Boolean @default(false)
canEditProducts   Boolean @default(false)
canDeleteProducts Boolean @default(false)

canAccessDashboard   Boolean @default(false)
canManageRoles      Boolean @default(false)
canManageUnits      Boolean @default(false)

canViewUsers    Boolean @default(false)
canAddUsers     Boolean @default(false)
canEditUsers    Boolean @default(false)
canDeleteUsers  Boolean @default(false)

canViewWarehouses   Boolean @default(false)
canAddWarehouses    Boolean @default(false)
canEditWarehouses   Boolean @default(false)
canDeleteWarehouses Boolean @default(false)

canViewSuppliers    Boolean @default(false)
canAddSuppliers     Boolean @default(false)
canEditSuppliers    Boolean @default(false)
canDeleteSuppliers  Boolean @default(false)

createdAt      DateTime   @default(now())
updatedAt      DateTime   @updatedAt
}


model Category {
  id          Int @id @default(autoincrement())
  title       String
  description String?
  imageUrl    String?
  status      Boolean @default(true)
  slug        String @unique
  products     Products[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt  
}

model Brand {
  id        Int      @id @default(autoincrement())
  title     String
  slug      String   @unique
  products  Products[]
  status    Boolean
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Unit {
  id           Int      @id @default(autoincrement())
  title        String @unique
  abbreviation String @unique
  products     Products[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Warehouse {
  id        Int      @id @default(autoincrement())
  name      String
  slug      String @unique
  imageUrl  String?
  phone     String
  email     String
  country   String
  city      String
  zipCode   String
  contactPerson String
  status        Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Supplier {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String @unique
  status      Boolean
  imageUrl    String?
  products    Products[]
  companyName String
  vatNumber   String
  email       String
  phone       String
  address     String
  city        String
  state       String
  postalCode  String
  country     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Banner {
  id Int @id @default(autoincrement())
  imageUrl   String
  bannerLink String
  position   String
  status     Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Products {
  id                Int      @id @default(autoincrement())
  name              String
  slug              String   @unique
  productCode       Int
  stockQty          Int
  codeSymbology     String
  saleUnit          Int?
  productCost       Float
  productPrice      Float
  productTax        Float
  taxMethod         String
  productImages     String[]
  productThumbnail  String?
  barcodeImageUrl   String?
  productDetails    String
  batchNumber       String
  expiryDate        DateTime
  isFeatured        Boolean @default(false)
  status            Boolean
  alertQuantity     Int
  unitId            Int
  unit              Unit @relation(fields:[unitId], references: [id])
  categoryId        Int
  category          Category @relation(fields:[categoryId], references: [id])
  brandId           Int
  brand             Brand @relation(fields:[brandId], references: [id])
  supplierId        Int?
  supplier          Supplier? @relation(fields:[supplierId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// model WarehouseProduct {
//   id           Int        @id @default(autoincrement())
//   warehouseId  Int
//   productId    Int
//   warehouse    Warehouse  @relation(fields: [warehouseId], references: [id])
//   product      Products   @relation(fields: [productId], references: [id])
//   createdAt    DateTime   @default(now())
//   updatedAt    DateTime   @updatedAt

//   @@unique([warehouseId, productId])
// }

